services:
  back-end:
    build: ./back
    container_name: backEnd
    ports: ["2000:2000"]
    volumes:
      - ./back:/code
    depends_on:
      db:
        condition: service_healthy
    networks: [promote]
    restart: unless-stopped

  db:
    container_name: database
    image: postgres:16
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 2s
      timeout: 5s
      retries: 20
    env_file:
      - back/.env
    networks: [promote]
    restart: unless-stopped

  adminer:
    container_name: adminer
    image: adminer
    ports: ["8080:8080"]
    networks: [promote]
    restart: unless-stopped

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    image: frontend
    container_name: frontend
    ports: ["3000:3000"]
    depends_on:
      back-end:
        condition: service_started
    # --- OPTION A: image-only (copy at build; no hot reload) ---
    # no volumes here

    # --- OPTION B (dev hot-reload): uncomment below ---
    volumes:
      - ./front:/app
      - /app/node_modules
    # environment:
    #   - CHOKIDAR_USEPOLLING=1
    #   - WATCHPACK_POLLING=true
    # command: npm run dev

    networks: [promote]
    restart: unless-stopped

networks:
  promote:
  devops:

volumes:
  data:
  esdata:
  prometheus-data: {}
  alertmanager-data: {}
  grafana-data: {}
